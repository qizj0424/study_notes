/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: NCU_Params.proto-c */

#ifndef PROTOBUF_C_NCU_5fParams_2eproto_2dc__INCLUDED
#define PROTOBUF_C_NCU_5fParams_2eproto_2dc__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _NCUParams NCUParams;


/* --- enums --- */


/* --- messages --- */

struct  _NCUParams
{
  ProtobufCMessage base;
  int32_t dump_params;
  int32_t ori_width;
  int32_t ori_height;
  int32_t ncu_tdns_en;
  int32_t ncu_sdns_en;
  int32_t ncu_sdns_en_ds;
  int32_t ncu_shrp_en;
  int32_t ncu_sdns_mv_use_en;
  int32_t ncu_tdns_abs_mode;
  int32_t ncu_tdns_strength;
  int32_t ncu_tdns_min_thres;
  int32_t ncu_tdns_peak_adjust;
  int32_t ncu_tdns_slope;
  int32_t ncu_psn_number;
  int32_t ncu_psn_incr_stre;
  int32_t ncu_psn_incr_stre_max;
  int32_t ncu_psn_stre_max;
  int32_t ncu_sdns_mv_thres;
  int32_t ncu_sdns_mv_thres_ds;
  int32_t ncu_sdns_smo_mo_min_thres;
  int32_t ncu_sdns_tex_mo_min_thres;
  int32_t ncu_sdns_smo_mo_min_thres_ds;
  int32_t ncu_sdns_tex_mo_min_thres_ds;
  int32_t ncu_sdns_hv_thres;
  int32_t ncu_sdns_hv_thres_ds;
  int32_t ncu_sdns_hv_ratio;
  int32_t ncu_sdns_aa_thres;
  int32_t ncu_sdns_edge_calc_abs_mode;
  int32_t ncu_sdns_edge_calc_window;
  int32_t ncu_sdns_edge_cmp_mode;
  int32_t ncu_sdns_smo_central_en;
  int32_t ncu_sdns_smo_window;
  int32_t ncu_sdns_smo_strength;
  int32_t ncu_sdns_smo_min_thres;
  int32_t ncu_sdns_smo_peak_adjust;
  int32_t ncu_sdns_smo_slope;
  int32_t ncu_sdns_tex_central_en;
  int32_t ncu_sdns_tex_window;
  int32_t ncu_sdns_tex_use_edge;
  int32_t ncu_sdns_tex_strength;
  int32_t ncu_sdns_tex_min_thres;
  int32_t ncu_sdns_tex_peak_adjust;
  int32_t ncu_sdns_tex_slope;
  int32_t ncu_sdns_smo_mo_central_en;
  int32_t ncu_sdns_smo_mo_window;
  int32_t ncu_sdns_smo_mo_strength;
  int32_t ncu_sdns_smo_mo_peak_adjust;
  int32_t ncu_sdns_smo_mo_slope;
  int32_t ncu_sdns_tex_mo_central_en;
  int32_t ncu_sdns_tex_mo_window;
  int32_t ncu_sdns_tex_mo_use_edge;
  int32_t ncu_sdns_tex_mo_strength;
  int32_t ncu_sdns_tex_mo_peak_adjust;
  int32_t ncu_sdns_tex_mo_slope;
  int32_t lum_calc_window;
  int32_t ncu_dk_y_thres;
  int32_t ncu_br_y_thres;
  int32_t ncu_dk_tdns_strength;
  int32_t ncu_dk_tdns_min_thres;
  int32_t ncu_dk_tdns_peak_adjust;
  int32_t ncu_dk_tdns_slope;
  int32_t ncu_br_tdns_strength;
  int32_t ncu_br_tdns_min_thres;
  int32_t ncu_br_tdns_peak_adjust;
  int32_t ncu_br_tdns_slope;
  int32_t ncu_sdns_dk_hv_thres;
  int32_t ncu_sdns_dk_hv_thres_step;
  int32_t ncu_sdns_dk_hv_thres_dir;
  int32_t ncu_sdns_dk_aa_thres;
  int32_t ncu_sdns_dk_aa_thres_step;
  int32_t ncu_sdns_dk_aa_thres_dir;
  int32_t ncu_sdns_dk_window;
  int32_t ncu_sdns_dk_strength;
  int32_t ncu_sdns_dk_min_thres;
  int32_t ncu_sdns_dk_thres_step;
  int32_t ncu_sdns_dk_thres_dir;
  int32_t ncu_sdns_dk_peak_adjust;
  int32_t ncu_sdns_dk_slope;
  int32_t ncu_sdns_br_hv_thres;
  int32_t ncu_sdns_br_hv_thres_step;
  int32_t ncu_sdns_br_hv_thres_dir;
  int32_t ncu_sdns_br_aa_thres;
  int32_t ncu_sdns_br_aa_thres_step;
  int32_t ncu_sdns_br_aa_thres_dir;
  int32_t ncu_sdns_br_window;
  int32_t ncu_sdns_br_strength;
  int32_t ncu_sdns_br_min_thres;
  int32_t ncu_sdns_br_thres_step;
  int32_t ncu_sdns_br_thres_dir;
  int32_t ncu_sdns_br_peak_adjust;
  int32_t ncu_sdns_br_slope;
  int32_t ncu_shrp_mode;
  int32_t ncu_shrp_mask_mode;
  int32_t ncu_shrp_window;
  int32_t ncu_shrp_high_stre;
  int32_t ncu_shrp_low_stre;
  int32_t ncu_shrp_alias_high_stre;
  int32_t ncu_shrp_alias_low_stre;
  int32_t ncu_shrp_high_roof;
  int32_t ncu_shrp_low_roof;
  int32_t ncu_dk_shrp_stre;
  int32_t ncu_br_shrp_stre;
  int32_t ncu_low_cut;
  int32_t ncu_high_cut;
  int32_t block_h_size;
  int32_t block_w_size;
  int32_t block_h_size_ds;
  int32_t block_w_size_ds;
  int32_t skip_h_size;
  int32_t skip_w_size;
  int32_t skip_h_size_ds;
  int32_t skip_w_size_ds;
  int32_t blur_radius_size;
  int32_t blur_radius_size_ds;
  int32_t blur_diff_thres;
  int32_t blur_diff_thres_change_ds;
  int32_t diff_num_thres;
  int32_t pixel_blur_diff_thres;
  int32_t mv_block_limit;
  int32_t mv_block_limit_ds;
  int32_t gain_threshold_0;
  int32_t gain_threshold_1;
  int32_t gain_threshold_2;
  int32_t gain_threshold_3;
  int32_t gain_threshold_4;
  int32_t gain_threshold_5;
  int32_t gain_threshold_6;
  int32_t gain_threshold_7;
  int32_t ncu_tdns_min_thres_0;
  int32_t ncu_tdns_strength_0;
  int32_t ncu_tdns_peak_adjust_0;
  int32_t ncu_psn_incr_stre_max_0;
  int32_t ncu_sdns_hv_thres_0;
  int32_t ncu_sdns_mv_thres_0;
  int32_t ncu_sdns_smo_mo_min_thres_0;
  int32_t ncu_sdns_tex_mo_min_thres_0;
  int32_t ncu_sdns_hv_thres_ds_0;
  int32_t ncu_sdns_mv_thres_ds_0;
  int32_t ncu_sdns_smo_mo_min_thres_ds_0;
  int32_t ncu_sdns_tex_mo_min_thres_ds_0;
  int32_t blur_diff_thres_0;
  int32_t diff_num_thres_0;
  int32_t pixel_blur_diff_thres_0;
  int32_t ncu_tdns_min_thres_1;
  int32_t ncu_tdns_strength_1;
  int32_t ncu_tdns_peak_adjust_1;
  int32_t ncu_psn_incr_stre_max_1;
  int32_t ncu_sdns_hv_thres_1;
  int32_t ncu_sdns_mv_thres_1;
  int32_t ncu_sdns_smo_mo_min_thres_1;
  int32_t ncu_sdns_tex_mo_min_thres_1;
  int32_t ncu_sdns_hv_thres_ds_1;
  int32_t ncu_sdns_mv_thres_ds_1;
  int32_t ncu_sdns_smo_mo_min_thres_ds_1;
  int32_t ncu_sdns_tex_mo_min_thres_ds_1;
  int32_t blur_diff_thres_1;
  int32_t diff_num_thres_1;
  int32_t pixel_blur_diff_thres_1;
  int32_t ncu_tdns_min_thres_2;
  int32_t ncu_tdns_strength_2;
  int32_t ncu_tdns_peak_adjust_2;
  int32_t ncu_psn_incr_stre_max_2;
  int32_t ncu_sdns_hv_thres_2;
  int32_t ncu_sdns_mv_thres_2;
  int32_t ncu_sdns_smo_mo_min_thres_2;
  int32_t ncu_sdns_tex_mo_min_thres_2;
  int32_t ncu_sdns_hv_thres_ds_2;
  int32_t ncu_sdns_mv_thres_ds_2;
  int32_t ncu_sdns_smo_mo_min_thres_ds_2;
  int32_t ncu_sdns_tex_mo_min_thres_ds_2;
  int32_t blur_diff_thres_2;
  int32_t diff_num_thres_2;
  int32_t pixel_blur_diff_thres_2;
  int32_t ncu_tdns_min_thres_3;
  int32_t ncu_tdns_strength_3;
  int32_t ncu_tdns_peak_adjust_3;
  int32_t ncu_psn_incr_stre_max_3;
  int32_t ncu_sdns_hv_thres_3;
  int32_t ncu_sdns_mv_thres_3;
  int32_t ncu_sdns_smo_mo_min_thres_3;
  int32_t ncu_sdns_tex_mo_min_thres_3;
  int32_t ncu_sdns_hv_thres_ds_3;
  int32_t ncu_sdns_mv_thres_ds_3;
  int32_t ncu_sdns_smo_mo_min_thres_ds_3;
  int32_t ncu_sdns_tex_mo_min_thres_ds_3;
  int32_t blur_diff_thres_3;
  int32_t diff_num_thres_3;
  int32_t pixel_blur_diff_thres_3;
  int32_t ncu_tdns_min_thres_4;
  int32_t ncu_tdns_strength_4;
  int32_t ncu_tdns_peak_adjust_4;
  int32_t ncu_psn_incr_stre_max_4;
  int32_t ncu_sdns_hv_thres_4;
  int32_t ncu_sdns_mv_thres_4;
  int32_t ncu_sdns_smo_mo_min_thres_4;
  int32_t ncu_sdns_tex_mo_min_thres_4;
  int32_t ncu_sdns_hv_thres_ds_4;
  int32_t ncu_sdns_mv_thres_ds_4;
  int32_t ncu_sdns_smo_mo_min_thres_ds_4;
  int32_t ncu_sdns_tex_mo_min_thres_ds_4;
  int32_t blur_diff_thres_4;
  int32_t diff_num_thres_4;
  int32_t pixel_blur_diff_thres_4;
  int32_t ncu_tdns_min_thres_5;
  int32_t ncu_tdns_strength_5;
  int32_t ncu_tdns_peak_adjust_5;
  int32_t ncu_psn_incr_stre_max_5;
  int32_t ncu_sdns_hv_thres_5;
  int32_t ncu_sdns_mv_thres_5;
  int32_t ncu_sdns_smo_mo_min_thres_5;
  int32_t ncu_sdns_tex_mo_min_thres_5;
  int32_t ncu_sdns_hv_thres_ds_5;
  int32_t ncu_sdns_mv_thres_ds_5;
  int32_t ncu_sdns_smo_mo_min_thres_ds_5;
  int32_t ncu_sdns_tex_mo_min_thres_ds_5;
  int32_t blur_diff_thres_5;
  int32_t diff_num_thres_5;
  int32_t pixel_blur_diff_thres_5;
  int32_t ncu_tdns_min_thres_6;
  int32_t ncu_tdns_strength_6;
  int32_t ncu_tdns_peak_adjust_6;
  int32_t ncu_psn_incr_stre_max_6;
  int32_t ncu_sdns_hv_thres_6;
  int32_t ncu_sdns_mv_thres_6;
  int32_t ncu_sdns_smo_mo_min_thres_6;
  int32_t ncu_sdns_tex_mo_min_thres_6;
  int32_t ncu_sdns_hv_thres_ds_6;
  int32_t ncu_sdns_mv_thres_ds_6;
  int32_t ncu_sdns_smo_mo_min_thres_ds_6;
  int32_t ncu_sdns_tex_mo_min_thres_ds_6;
  int32_t blur_diff_thres_6;
  int32_t diff_num_thres_6;
  int32_t pixel_blur_diff_thres_6;
  int32_t ncu_tdns_min_thres_7;
  int32_t ncu_tdns_strength_7;
  int32_t ncu_tdns_peak_adjust_7;
  int32_t ncu_psn_incr_stre_max_7;
  int32_t ncu_sdns_hv_thres_7;
  int32_t ncu_sdns_mv_thres_7;
  int32_t ncu_sdns_smo_mo_min_thres_7;
  int32_t ncu_sdns_tex_mo_min_thres_7;
  int32_t ncu_sdns_hv_thres_ds_7;
  int32_t ncu_sdns_mv_thres_ds_7;
  int32_t ncu_sdns_smo_mo_min_thres_ds_7;
  int32_t ncu_sdns_tex_mo_min_thres_ds_7;
  int32_t blur_diff_thres_7;
  int32_t diff_num_thres_7;
  int32_t pixel_blur_diff_thres_7;
};
#define NCUPARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ncuparams__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/* NCUParams methods */
void   ncuparams__init
                     (NCUParams         *message);
size_t ncuparams__get_packed_size
                     (const NCUParams   *message);
size_t ncuparams__pack
                     (const NCUParams   *message,
                      uint8_t             *out);
size_t ncuparams__pack_to_buffer
                     (const NCUParams   *message,
                      ProtobufCBuffer     *buffer);
NCUParams *
       ncuparams__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ncuparams__free_unpacked
                     (NCUParams *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NCUParams_Closure)
                 (const NCUParams *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ncuparams__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_NCU_5fParams_2eproto_2dc__INCLUDED */
